# Generated by Django 4.2.16 on 2024-11-14 08:37

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import imagekit.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, max_length=11)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('profile_img', imagekit.models.fields.ProcessedImageField(blank=True, default='default_profile.jpg', null=True, upload_to='profile_images/')),
                ('nickname', models.CharField(blank=True, max_length=30, null=True, unique=True)),
                ('bookmark_product_list', models.JSONField(blank=True, default=list, null=True)),
                ('bookmark_article_list', models.JSONField(blank=True, default=list, null=True)),
                ('liked_article_list', models.JSONField(blank=True, default=list, null=True)),
                ('gender', models.CharField(blank=True, choices=[('N', '선택'), ('M', '남성'), ('F', '여성')], default='N', max_length=1)),
                ('property', models.BigIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='자산')),
                ('marital_status', models.BooleanField(default=False, verbose_name='결혼 여부')),
                ('financial_products', models.JSONField(blank=True, default=list, null=True, verbose_name='가입 상품 목록')),
                ('contracted_deposit', models.JSONField(blank=True, default=list, null=True, verbose_name='가입 예금 목록')),
                ('contracted_savings', models.JSONField(blank=True, default=list, null=True, verbose_name='가입 적금 목록')),
                ('salary', models.BigIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='연봉')),
                ('tendency', models.CharField(blank=True, choices=[('NO', '선택'), ('AG', '공격 투자형'), ('AC', '적극 투자형'), ('NE', '위험 중립형'), ('CO', '안정 추구형'), ('ST', '안정형')], default='NO', max_length=2, verbose_name='투자 성향')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
